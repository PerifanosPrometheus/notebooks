{
  
    
        "post0": {
            "title": "Shuffling Alters QAP Results",
            "content": "%pylab inline import sys sys.path sys.path.insert(0, &#39;/Users/asaadeldin/Downloads/GitHub/scipy&#39;) from scipy.optimize import quadratic_assignment . Populating the interactive namespace from numpy and matplotlib . from graspy.simulations import er_corr rho = 0.9 p = 0.5 n = 20 G1, G2 = er_corr(n, p, rho, directed = False, loops = False) . rep = 5 scores = np.zeros(rep) for i in range(rep): res=quadratic_assignment(G1,G2, options={&#39;maximize&#39;:True, &#39;shuffle_input&#39;: False}) scores[i] =res.fun . scores . array([168., 168., 168., 168., 168.]) . rep = 5 scores = np.zeros(rep) for i in range(rep): res=quadratic_assignment(G1,G2, options={&#39;maximize&#39;:True, &#39;rng&#39;: i}) scores[i] =res.fun . scores . array([174., 162., 164., 168., 164.]) .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/31/shuffle_variance.html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/31/shuffle_variance.html",
            "date": " • Aug 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Can you make the objective function better via gm, compared to the purported 1-1?",
            "content": "# collapse import sys sys.path sys.path.insert(0, &#39;/Users/asaadeldin/Downloads/GitHub/scipy&#39;) from scipy.optimize import quadratic_assignment . . # collapse %pylab inline import pandas as pd from graspy.utils import pass_to_ranks import seaborn as sns . . Populating the interactive namespace from numpy and matplotlib . Experiment Summary . If $A_i$ is the adjacency matrix at time index $i$, then with $n$ time indices, for $i = [1, n-1]$ do $GM(A_i, A_{i+1})$, where $A_i$ and $A_{i+1}$ are pre-matched based on the known 1-1 correspondance. . For each graph pair, run $GM$ $t = 20$ times, with each $t$ corresponding to a different random permutation on $A_{i+1}$. . Internally in GM, $A_{i+1}$ is shuffled, that is $A_{i+1}&#39; = Q A_{i+1} Q^T,$ where $Q$ is sampled uniformly from the set of $m x m$ permutations matrices, where $m$ is the size of the vertex set. . $GM$ is run from the barycenter ($ gamma = 0$). . Compare the objective function values of the matrices with the known matching ($trace (A_i A_{i+1}^T)$) and the average objective function resulting from $t$ runs of $GM(A_i, A_{i+1})$ . # collapse def load_adj(file): df = pd.read_csv(f&#39;org_sig1_max/{file}.csv&#39;, names = [&#39;from&#39;, &#39;to&#39;, &#39;weight&#39;]) return df . . # collapse times = [1,4,11,17,25,34,45,48,52,55,63,69,70,76,80,83,90,97,103,111,117,129,130,132,139,140,146,153,160,167, 174,181,188,192,195,202,209,216,223,229] . . # collapse from scipy.stats import sem t = 20 ofvs = np.zeros((len(times)-1,3)) # [opt_ofv, gm_ofv] for i in range(len(times)-1): # constructing the adjacency matrices Ael = load_adj(times[i]) Bel = load_adj(times[i+1]) nodes = np.concatenate((Ael[&#39;from&#39;],Ael[&#39;to&#39;],Bel[&#39;from&#39;],Bel[&#39;to&#39;]), axis=0) nodes = list(set(nodes)) n = len(nodes) A = np.zeros((n,n)) B = np.zeros((n,n)) row_list_A = [nodes.index(x) for x in Ael[&#39;from&#39;]] col_list_A = [nodes.index(x) for x in Ael[&#39;to&#39;]] A[row_list_A, col_list_A] = Ael[&#39;weight&#39;] row_list_B = [nodes.index(x) for x in Bel[&#39;from&#39;]] col_list_B = [nodes.index(x) for x in Bel[&#39;to&#39;]] B[row_list_B, col_list_B] = Bel[&#39;weight&#39;] A = pass_to_ranks(A) B = pass_to_ranks(B) gm_ofvs = np.zeros(t) for j in range(t): gmp = {&#39;maximize&#39;:True} res = quadratic_assignment(A,B, options=gmp) gm_ofvs[j] = res.fun gm_ofv = np.mean(gm_ofvs) gm_error = sem(gm_ofvs) opt_ofv = (A*B).sum() ofvs[i,:] = [opt_ofv, gm_ofv, 2*gm_error] . . # collapse sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(12,8)}) plt.scatter(np.arange(len(times)-1), ofvs[:,0], label = &#39;opt ofv&#39;) #plt.scatter(np.arange(len(times)), ofvs[:,1], label = &#39;gm ofv&#39;) plt.errorbar(np.arange(len(times)-1),ofvs[:,1], ofvs[:,2],label = &#39;average gm ofv +/- 2 s.e.&#39;,marker=&#39;o&#39;, fmt = &#39; &#39; ,capsize=3, elinewidth=1, markeredgewidth=1,color=&#39;orange&#39;) plt.legend() plt.ylabel(&#39;objective function value&#39;) plt.xlabel(&#39;time stamp (A_x &amp; A_{x+1})&#39;) . . Text(0.5, 0, &#39;time stamp (A_x &amp; A_{x+1})&#39;) . Extremely low variance above (error bars not visible) . # collapse plt.scatter(np.arange(len(times)-1), ofvs[:,1]/ofvs[:,0]) plt.hlines(1,0,40,linestyles=&#39;dashed&#39;, color = &#39;red&#39;, label=&#39;y=1 (above means gm maximes ofv more)&#39;) plt.legend() plt.xlabel(&#39;Time Stamp&#39;) plt.ylabel(&#39;gm_ofv / pre-matched_ofv&#39;) . . Text(0, 0.5, &#39;gm_ofv / pre-matched_ofv&#39;) . # collapse df = pd.DataFrame(ofvs,columns=[&quot;Pre Matched OFV&quot;,&quot;Avergae GM OFV&quot;, &quot;2*s.e. GM OFV&quot;]) print(df) . . Pre Matched OFV Avergae GM OFV 2*s.e. GM OFV 0 77.778503 83.203695 6.520387e-15 1 102.363435 105.635371 6.520387e-15 2 539.611816 586.160090 5.216310e-14 3 184.831288 198.412628 2.608155e-14 4 159.324311 203.971815 0.000000e+00 5 984.399156 1152.762630 1.043262e-13 6 1089.477143 1119.627925 0.000000e+00 7 1259.423017 1290.748354 2.086524e-13 8 1585.077755 1730.198821 0.000000e+00 9 1842.297675 2111.213946 2.086524e-13 10 2144.029010 2320.060471 2.086524e-13 11 2031.803286 2092.043201 2.086524e-13 12 1956.629442 2111.907016 2.086524e-13 13 2449.635493 2580.498796 0.000000e+00 14 2488.814694 2536.434492 2.086524e-13 15 2435.361725 2648.848434 2.086524e-13 16 2450.644416 2909.986251 0.000000e+00 17 2799.810641 3086.113044 4.173048e-13 18 2795.063975 3051.412096 2.086524e-13 19 3093.261915 3183.004837 4.173048e-13 20 3483.603820 3653.248466 0.000000e+00 21 3788.502289 3834.393669 2.086524e-13 22 3837.060440 3977.016536 4.173048e-13 23 3625.742003 3800.326356 0.000000e+00 24 3067.810931 3308.850782 2.086524e-13 25 3440.573652 3634.710350 0.000000e+00 26 4605.778803 4669.727638 4.173048e-13 27 4541.053424 4634.822284 4.173048e-13 28 4305.613442 4587.914977 4.173048e-13 29 4103.909802 4283.742180 4.173048e-13 30 3897.553992 4100.491185 4.173048e-13 31 3744.066025 3871.777437 2.086524e-13 32 3206.210282 3391.022125 0.000000e+00 33 3073.053348 3358.433002 4.173048e-13 34 3177.553500 3395.320322 0.000000e+00 35 3332.128518 3368.928739 2.086524e-13 36 3180.781410 3517.218062 0.000000e+00 37 3385.105045 3510.301189 0.000000e+00 38 3229.233901 3407.950538 2.086524e-13 .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/29/known-correspondance.html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/29/known-correspondance.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "this is a test",
            "content": "import numpy as np .",
            "url": "https://neurodata.github.io/notebooks/pedigo/test/2020/08/25/test.html",
            "relUrl": "/pedigo/test/2020/08/25/test.html",
            "date": " • Aug 25, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "GM+SS using JAgt Seedless Procrustes",
            "content": "# collapse import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from graspy.simulations import sbm_corr . . Experiment Summary . Let $(G_1, G_2) sim rho-SBM( vec{n},B)$. (NB: binary, symmetric, hollow.) . $K = 3$. . the marginal SBM is conditional on block sizes $ vec{n}=[n_1,n_2,n_3]$. . $B = [(.20,.01,.01);(.01,.10,.01);(.01,.01,.20)]$. (NB: rank($B$)=3 with evalues $ approx [0.212,0.190,0.098]$.) . with $n = 75$ and $ vec{n}=[n_1,n_2,n_3] = [25,25,25]$ . for each $ rho in {0.5,0.6, cdots,0.9,1.0 }$ generate $r$ replicates $(G_1, G_2)$. . For all $r$ replicates, run $GM$, $GM_{SS}$ &amp; $GM_{J.Agt}$ each $t$ times, with each $t$ corresponding to a different random permutation on $G_2$. . Specifically,$G_2&#39; = Q G_2 Q^T,$ where $Q$ is sampled uniformly from the set of $n x n$ permutations matrices. . For each $t$ permutation, run $GM$ &amp; $GM_{SS}$ &amp; $GM_{J.Agt}$ from the barycenter ($ gamma = 0$). . For each $r$, the $t$ permutation with the highest associated objective function value will have it&#39;s match ratio recorded . For any $ rho$ value, have $ delta$ denote the average match ratio over the $r$ realizations . Plot $x= rho$ vs $y$= $ delta$ $ pm$ 2s.e. . This notebook contains figures for $r=50$, $t=10$ . NOTE: The max number of FW iterations here is set at 20. . Description of $GM_{ss}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . MedianFlip both into the first orthant yielding $ bar{X}_1$ &amp; $ bar{X_2}$ . let $Phat = bar{X}_1 bar{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . Description of $GM_{J.Agt}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . With $2^d$ initializations, where $d$ is dimension, use J.Agt&#39;s seedless procrustes to find the optimal orthogonal alignment matrix, $Q$. . let $Phat = hat{X}_1 Q hat{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . # collapse # load in J.Agt data # ratios_j = np.genfromtxt(&#39;ratios.csv&#39;, delimiter = &#39;,&#39;) # ratios_ss_j = np.genfromtxt(&#39;ratios_ss.csv&#39;, delimiter=&#39;,&#39;) # scores_j = np.genfromtxt(&#39;scores.csv&#39;, delimiter = &#39;,&#39;) # scores_ss_j = np.genfromtxt(&#39;scores_ss.csv&#39;, delimiter=&#39;,&#39;) # rhos = np.arange(5,10.5,0.5) *0.1 # n_p = len(rhos) # ratios_opt_j = np.genfromtxt(&#39;ratios_opt.csv&#39;, delimiter = &#39;,&#39;) # ratios_opt_ss_j = np.genfromtxt(&#39;ratios_opt_ss.csv&#39;, delimiter=&#39;,&#39;) # scores_opt_j = np.genfromtxt(&#39;scores_opt.csv&#39;, delimiter = &#39;,&#39;) # scores_opt_ss_j = np.genfromtxt(&#39;scores_opt_ss.csv&#39;, delimiter=&#39;,&#39;) . . # collapse ratios = np.genfromtxt(&#39;ratios.csv&#39;, delimiter = &#39;,&#39;) ratios_ss = np.genfromtxt(&#39;ratios_ss.csv&#39;, delimiter=&#39;,&#39;) scores = np.genfromtxt(&#39;scores.csv&#39;, delimiter = &#39;,&#39;) scores_ss = np.genfromtxt(&#39;scores_ss.csv&#39;, delimiter=&#39;,&#39;) ratios_opt = np.genfromtxt(&#39;ratios_opt.csv&#39;, delimiter = &#39;,&#39;) ratios_opt_ss = np.genfromtxt(&#39;ratios_opt_ss.csv&#39;, delimiter=&#39;,&#39;) scores_opt = np.genfromtxt(&#39;scores_opt.csv&#39;, delimiter = &#39;,&#39;) scores_opt_ss = np.genfromtxt(&#39;scores_opt_ss.csv&#39;, delimiter=&#39;,&#39;) . . # collapse from scipy.stats import sem import seaborn as sns error = np.asarray([sem(ratios_j[i,:]) for i in range(n_p)]) average = np.asarray([np.mean(ratios_j[i,:] ) for i in range(n_p)]) error_j = np.asarray([sem(ratios_ss_j[i,:]) for i in range(n_p)]) average_j = np.asarray([np.mean(ratios_ss_j[i,:] ) for i in range(n_p)]) . . # collapse error_ss = np.asarray([sem(ratios_ss[i,:]) for i in range(n_p)]) average_ss = np.asarray([np.mean(ratios_ss[i,:] ) for i in range(n_p)]) error2 = np.asarray([sem(ratios[i,:]) for i in range(n_p)]) average2 = np.asarray([np.mean(ratios[i,:] ) for i in range(n_p)]) . . # collapse sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(12,8)}) # plt.errorbar(rhos[odds],average_ss[odds], error_ss[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;, color=&#39;blue&#39;) # plt.errorbar(rhos[odds],average[odds], error[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.errorbar(rhos,average_j, error_j,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+J.Agt&#39;, color=&#39;green&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;, color=&#39;blue&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.text(0.5,0.5, &#39;r=50, t=10&#39;) plt.legend() . . &lt;matplotlib.legend.Legend at 0x7f8588c091c0&gt; . Script to run simulations . # collapse import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from .qap_sim import quadratic_assignment_sim import seaborn as sns from graspy.match import GraphMatch as GMP from graspy.simulations import sbm_corr from .jagt import SeedlessProcrustes from graspy.embed import AdjacencySpectralEmbed def run_sim(r, t, n=150, flip=&#39;median&#39;): def match_ratio(inds, n): return np.count_nonzero(inds == np.arange(n)) / n def _median_sign_flips(X1, X2): X1_medians = np.median(X1, axis=0) X2_medians = np.median(X2, axis=0) val1 = np.sign(X1_medians).astype(int) X1 = np.multiply(val1.reshape(-1, 1).T, X1) val2 = np.sign(X2_medians).astype(int) X2 = np.multiply(val2.reshape(-1, 1).T, X2) return X1, X2 #rhos = 0.1 * np.arange(11)[5:] m = r rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) ratios = np.zeros((n_p,m)) scores = np.zeros((n_p,m)) ratios_ss = np.zeros((n_p,m)) scores_ss = np.zeros((n_p,m)) ratios_opt = np.zeros((n_p,m)) scores_opt = np.zeros((n_p,m)) ratios_opt_ss = np.zeros((n_p,m)) scores_opt_ss = np.zeros((n_p,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False for k, rho in enumerate(rhos): np.random.seed(8888) seeds = [np.random.randint(1e8, size=t) for i in range(m)] def run_sim(seed): A1, A2 = sbm_corr( block_members, block_probs, rho, directed=directed, loops=loops ) score = 0 res_opt = None score_ss = 0 res_opt_ss = None ase = AdjacencySpectralEmbed(n_components=3, algorithm=&#39;truncated&#39;) Xhat1 = ase.fit_transform(A1) Xhat2 = ase.fit_transform(A2) if flip==&#39;median&#39;: xhh1, xhh2 = _median_sign_flips(Xhat1, Xhat2) S = xhh1 @ xhh2.T elif flip==&#39;jagt&#39;: sp = SeedlessProcrustes().fit(Xhat1, Xhat2) xhh1 = Xhat1@sp.Q xhh2 = Xhat2 S = xhh1 @ xhh2.T else: S = None for j in range(t): res = quadratic_assignment_sim(A1, A2, True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score: res_opt = res score = res[&#39;score&#39;] res = quadratic_assignment_sim(A1, A2, True, S, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score_ss: res_opt_ss = res score_ss = res[&#39;score&#39;] ratio = match_ratio(res_opt[&#39;col_ind&#39;], n) score = res_opt[&#39;score&#39;] ratio_ss = match_ratio(res_opt_ss[&#39;col_ind&#39;], n) score_ss = res_opt_ss[&#39;score&#39;] res = quadratic_assignment_sim(A1, A2, True, options={&#39;shuffle_input&#39;:False}) ratio_opt = match_ratio(res[&#39;col_ind&#39;], n) score_opt = res[&#39;score&#39;] res = quadratic_assignment_sim(A1, A2, True, S, options={&#39;shuffle_input&#39;:False}) ratio_opt_ss = match_ratio(res[&#39;col_ind&#39;], n) score_opt_ss = res[&#39;score&#39;] return ratio, score, ratio_ss, score_ss, ratio_opt, score_opt, ratio_opt_ss, score_opt_ss result = Parallel(n_jobs=-1, verbose=10)(delayed(run_sim)(seed) for seed in seeds) ratios[k,:] = [item[0] for item in result] scores[k,:] = [item[1] for item in result] ratios_ss[k,:] = [item[2] for item in result] scores_ss[k,:] = [item[3] for item in result] ratios_opt[k,:] = [item[4] for item in result] scores_opt[k,:] = [item[5] for item in result] ratios_opt_ss[k,:] = [item[6] for item in result] scores_opt_ss[k,:] = [item[7] for item in result] np.savetxt(&#39;ratios.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt.csv&#39;,ratios_opt, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt.csv&#39;,scores_opt, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt_ss.csv&#39;,ratios_opt_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt_ss.csv&#39;,scores_opt_ss, delimiter=&#39;,&#39;) from scipy.stats import sem error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] sns.set_context(&#39;paper&#39;) #sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) txt =f&#39;r={r}, t={t}&#39; plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.text(0.5,0.5,txt) plt.legend() plt.savefig(&#39;figure_matchratio.png&#39;, dpi=150, facecolor=&quot;w&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0.3) . .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/24/jagt-gm.html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/24/jagt-gm.html",
            "date": " • Aug 24, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Recreating Youngser's R code figures",
            "content": "# collapse import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from graspy.simulations import sbm_corr . . Experiment Summary . All values were set to best replicate Youngser&#39;s Figure . Let $(G_1, G_2) sim rho-SBM( vec{n},B)$. (NB: binary, symmetric, hollow.) . $K = 3$. . the marginal SBM is conditional on block sizes $ vec{n}=[n_1,n_2,n_3]$. . $B = [(.20,.01,.01);(.01,.10,.01);(.01,.01,.20)]$. (NB: rank($B$)=3 with evalues $ approx [0.212,0.190,0.098]$.) . with $n = 150$ and $ vec{n}=[n_1,n_2,n_3] = [50,50,50]$ . for each $ rho in {0.5,0.6, cdots,0.9,1.0 }$ generate $r$ replicates $(G_1, G_2)$. . For all $r$ replicates, run $GM$ and $GM_{SS}$ each $t$ times, with each $t$ corresponding to a different random permutation on $G_2$. . Specifically,$G_2&#39; = Q G_2 Q^T,$ where $Q$ is sampled uniformly from the set of $n x n$ permutations matrices. . For each $t$ permutation, run $GM$ &amp; $GM_{SS}$ from the barycenter ($ gamma = 0$). . For each $r$, the $t$ permutation with the highest associated objective function value will have it&#39;s match ratio recorded . For any $ rho$ value, have $ delta$ denote the average match ratio over the $r$ realizations . Plot $x= rho$ vs $y$= $ delta$ $ pm$ s.e. . This notebook contains figures for $r=50$, $t=10$ . NOTE: The max number of FW iterations here is set at 20 to best replicate Youngser R results. . Description of $GM_{ss}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . MedianFlip both into the first orthant yielding $ bar{X}_1$ &amp; $ bar{X_2}$ . let $Phat = bar{X}_1 bar{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . Code included at the bottom, which was run on a remote server . # collapse ratios = np.genfromtxt(&#39;ratios.csv&#39;, delimiter = &#39;,&#39;) ratios_ss = np.genfromtxt(&#39;ratios_ss.csv&#39;, delimiter=&#39;,&#39;) scores = np.genfromtxt(&#39;scores.csv&#39;, delimiter = &#39;,&#39;) scores_ss = np.genfromtxt(&#39;scores_ss.csv&#39;, delimiter=&#39;,&#39;) rhos = np.arange(5,10.5,0.5) *0.1 odds = [i for i in range(len(rhos)) if i%2==0] n_p = len(rhos) . . # collapse from scipy.stats import sem import seaborn as sns error = np.asarray([sem(ratios[i,:]) for i in range(n_p)]) average = np.asarray([np.mean(ratios[i,:] ) for i in range(n_p)]) error_ss = np.asarray([sem(ratios_ss[i,:]) for i in range(n_p)]) average_ss = np.asarray([np.mean(ratios_ss[i,:] ) for i in range(n_p)]) . . Ali&#39;s Figure (with Python) . # collapse sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(12,8)}) plt.errorbar(rhos[odds],average_ss[odds], error_ss[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;, color=&#39;blue&#39;) plt.errorbar(rhos[odds],average[odds], error[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.text(0.5,0.5, &#39;r=50, t=10&#39;) plt.legend() . . &lt;matplotlib.legend.Legend at 0x7fa5f8c33d30&gt; . Youngser&#39;s Figure (with R) . . Eyeballing both onto the same figure . # collapse gm_ss_y = [0.01, 0.03, 0.12, 0.42, 0.77, 1.0] gm_y = [0, 0, 0.03, 0.15, 0.62, 1.0] sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(12,8)}) plt.errorbar(rhos[odds],average_ss[odds], error_ss[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;, color=&#39;blue&#39;) plt.plot(rhos[odds],gm_ss_y, color=&#39;blue&#39;, marker=&#39;^&#39;) plt.errorbar(rhos[odds],average[odds], error[odds],marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.plot(rhos[odds],gm_y, color=&#39;red&#39;, marker=&#39;^&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.text(0.5,0.5, &#39;triangles = youngser, circle = ali&#39;) plt.legend() . . &lt;matplotlib.legend.Legend at 0x7fa5ef18bbe0&gt; . # collapse ratios_opt = np.genfromtxt(&#39;ratios_opt.csv&#39;, delimiter = &#39;,&#39;) ratios_opt_ss = np.genfromtxt(&#39;ratios_opt_ss.csv&#39;, delimiter=&#39;,&#39;) scores_opt = np.genfromtxt(&#39;scores_opt.csv&#39;, delimiter = &#39;,&#39;) scores_opt_ss = np.genfromtxt(&#39;scores_opt_ss.csv&#39;, delimiter=&#39;,&#39;) rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) . . Call &#39;best case&#39; the instance where $Q$ sampled uniformly from the set of $n x n$ permutations matrices is equal to the identity matrix. . As we see from the figures below, for vanilla GM, the best case seems to consistently perform better, but with GM+SS they appear to be consistently about the same . GM+SS . # collapse diff = scores_opt_ss[9,:] - scores_ss[9,:] plt.hist(diff, bins=10) plt.vlines(0,0,50,linestyles=&#39;dashed&#39;, color = &#39;red&#39;, label=&#39;x=0&#39;) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Objective Value Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . # collapse diff = ratios_opt_ss[9,:] - ratios_ss[9,:] plt.hist(diff, bins=10) plt.vlines(0,0,50,linestyles=&#39;dashed&#39;, color = &#39;red&#39;, label=&#39;x=0&#39;) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Match Ratio Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . GM . # collapse diff = scores_opt[9,:] - scores[9,:] plt.hist(diff, bins=10) plt.vlines(0,0,50,linestyles=&#39;dashed&#39;, color = &#39;red&#39;, label=&#39;x=0&#39;) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Objective Value Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . # collapse diff = ratios_opt[9,:] - ratios[9,:] plt.hist(diff, bins=10) plt.vlines(0,0,50,linestyles=&#39;dashed&#39;, color = &#39;red&#39;, label=&#39;x=0&#39;) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Match Ratio Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . Script to run simulations . # collapse import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from .qap_sim import quadratic_assignment_sim import seaborn as sns from graspy.match import GraphMatch as GMP from graspy.simulations import sbm_corr def run_sim(r, t): def match_ratio(inds, n): return np.count_nonzero(inds == np.arange(n)) / n n = 150 m = r #rhos = 0.1 * np.arange(11)[5:] rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) ratios = np.zeros((n_p,m)) scores = np.zeros((n_p,m)) ratios_ss = np.zeros((n_p,m)) scores_ss = np.zeros((n_p,m)) ratios_opt = np.zeros((n_p,m)) scores_opt = np.zeros((n_p,m)) ratios_opt_ss = np.zeros((n_p,m)) scores_opt_ss = np.zeros((n_p,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False for k, rho in enumerate(rhos): np.random.seed(8888) seeds = [np.random.randint(1e8, size=t) for i in range(m)] def run_sim(seed): A1, A2 = sbm_corr( block_members, block_probs, rho, directed=directed, loops=loops ) score = 0 res_opt = None score_ss = 0 res_opt_ss = None for j in range(t): res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score: res_opt = res score = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score_ss: res_opt_ss = res score_ss = res[&#39;score&#39;] ratio = match_ratio(res_opt[&#39;col_ind&#39;], n) score = res_opt[&#39;score&#39;] ratio_ss = match_ratio(res_opt_ss[&#39;col_ind&#39;], n) score_ss = res_opt_ss[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt = match_ratio(res[&#39;col_ind&#39;], n) score_opt = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt_ss = match_ratio(res[&#39;col_ind&#39;], n) score_opt_ss = res[&#39;score&#39;] return ratio, score, ratio_ss, score_ss, ratio_opt, score_opt, ratio_opt_ss, score_opt_ss result = Parallel(n_jobs=-1, verbose=10)(delayed(run_sim)(seed) for seed in seeds) ratios[k,:] = [item[0] for item in result] scores[k,:] = [item[1] for item in result] ratios_ss[k,:] = [item[2] for item in result] scores_ss[k,:] = [item[3] for item in result] ratios_opt[k,:] = [item[4] for item in result] scores_opt[k,:] = [item[5] for item in result] ratios_opt_ss[k,:] = [item[6] for item in result] scores_opt_ss[k,:] = [item[7] for item in result] np.savetxt(&#39;ratios.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt.csv&#39;,ratios_opt, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt.csv&#39;,scores_opt, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt_ss.csv&#39;,ratios_opt_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt_ss.csv&#39;,scores_opt_ss, delimiter=&#39;,&#39;) from scipy.stats import sem error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] sns.set_context(&#39;paper&#39;) #sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) txt =f&#39;r={r}, t={t}&#39; plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.text(0.5,0.5,txt) plt.legend() plt.savefig(&#39;figure_matchratio.png&#39;, dpi=150, facecolor=&quot;w&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0.3) . .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/19/recreate-youngser.html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/19/recreate-youngser.html",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Graph matching with spectral similarity (8-18, r=100, t=30, 'max_iter' = 20)",
            "content": "# collapse import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from graspy.simulations import sbm_corr . . Experiment Summary . Let $(G_1, G_2) sim rho-SBM( vec{n},B)$. (NB: binary, symmetric, hollow.) . $K = 3$. . the marginal SBM is conditional on block sizes $ vec{n}=[n_1,n_2,n_3]$. . $B = [(.20,.01,.01);(.01,.10,.01);(.01,.01,.20)]$. (NB: rank($B$)=3 with evalues $ approx [0.212,0.190,0.098]$.) . with $n = 150$ and $ vec{n}=[n_1,n_2,n_3] = [50,50,50]$ . for each $ rho in {0,0.1, cdots,0.9,1.0 }$ generate $r$ replicates $(G_1, G_2)$. . For all $r$ replicates, run $GM$ and $GM_{SS}$ each $t$ times, with each $t$ corresponding to a different random permutation on $G_2$. . Specifically,$G_2&#39; = Q G_2 Q^T,$ where $Q$ is sampled uniformly from the set of $n x n$ permutations matrices. . For each $t$ permutation, run $GM$ &amp; $GM_{SS}$ from the barycenter ($ gamma = 0$). . For each $r$, the $t$ permutation with the highest associated objective function value will have it&#39;s match ratio recorded . For any $ rho$ value, have $ delta$ denote the average match ratio over the $r$ realizations . Plot $x= rho$ vs $y$= $ delta$ $ pm$ 2s.e. . This notebook contains figures for $r=100$, $t=30$ . NOTE: The max number of FW iterations here is set at 20 to best replicate Youngser R results. . Description of $GM_{ss}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . MedianFlip both into the first orthant yielding $ bar{X}_1$ &amp; $ bar{X_2}$ . let $Phat = bar{X}_1 bar{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . Code included at the bottom, which was run on a remote server . # collapse ratios = np.genfromtxt(&#39;ratios.csv&#39;, delimiter = &#39;,&#39;) ratios_ss = np.genfromtxt(&#39;ratios_ss.csv&#39;, delimiter=&#39;,&#39;) scores = np.genfromtxt(&#39;scores.csv&#39;, delimiter = &#39;,&#39;) scores_ss = np.genfromtxt(&#39;scores_ss.csv&#39;, delimiter=&#39;,&#39;) rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) . . # collapse from scipy.stats import sem import seaborn as sns error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] . . # collapse sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(12,8)}) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.legend() . . &lt;matplotlib.legend.Legend at 0x7fa5f6a5fd90&gt; . #collapse ratios_opt = np.genfromtxt(&#39;ratios_opt.csv&#39;, delimiter = &#39;,&#39;) ratios_opt_ss = np.genfromtxt(&#39;ratios_opt_ss.csv&#39;, delimiter=&#39;,&#39;) scores_opt = np.genfromtxt(&#39;scores_opt.csv&#39;, delimiter = &#39;,&#39;) scores_opt_ss = np.genfromtxt(&#39;scores_opt_ss.csv&#39;, delimiter=&#39;,&#39;) rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) . . Call &#39;best case&#39; the instance where $Q$ sampled uniformly from the set of $n x n$ permutations matrices is equal to the identity matrix . GM+SS . # collapse diff = scores_opt_ss[9,:] - scores_ss[9,:] plt.hist(diff, bins=10) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Objective Value Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . # collapse diff = ratios_opt_ss[9,:] - ratios_ss[9,:] plt.hist(diff, bins=10) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Match Ratio Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . GM . #collapse diff = scores_opt[9,:] - scores[9,:] plt.hist(diff, bins=10) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Objective Value Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . #collapse diff = ratios_opt[9,:] - ratios[9,:] plt.hist(diff, bins=10) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Match Ratio Difference (&quot;Best Case&quot; - argmax_t[objective_t])&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . Script to run simulations . # collapse import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from qap_sim import quadratic_assignment_sim import seaborn as sns from graspy.match import GraphMatch as GMP from graspy.simulations import sbm_corr def match_ratio(inds, n): return np.count_nonzero(inds == np.arange(n)) / n n = 150 m = 100 t = 30 #rhos = 0.1 * np.arange(11)[5:] rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) ratios = np.zeros((n_p,m)) scores = np.zeros((n_p,m)) ratios_ss = np.zeros((n_p,m)) scores_ss = np.zeros((n_p,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False for k, rho in enumerate(rhos): np.random.seed(8888) seeds = [np.random.randint(1e8, size=t) for i in range(m)] def run_sim(seed): A1, A2 = sbm_corr( block_members, block_probs, rho, directed=directed, loops=loops ) score = 0 res_opt = None score_ss = 0 res_opt_ss = None for j in range(t): res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score: res_opt = res score = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score_ss: res_opt_ss = res score_ss = res[&#39;score&#39;] ratio = match_ratio(res_opt[&#39;col_ind&#39;], n) score = res_opt[&#39;score&#39;] ratio_ss = match_ratio(res_opt_ss[&#39;col_ind&#39;], n) score_ss = res_opt_ss[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt = match_ratio(res[&#39;col_ind&#39;], n) score_opt = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt_ss = match_ratio(res[&#39;col_ind&#39;], n) score_opt_ss = res[&#39;score&#39;] return ratio, score, ratio_ss, score_ss, ratio_opt, score_opt, ratio_opt_ss, score_opt_ss result = Parallel(n_jobs=-1, verbose=10)(delayed(run_sim)(seed) for seed in seeds) ratios[k,:] = [item[0] for item in result] scores[k,:] = [item[1] for item in result] ratios_ss[k,:] = [item[2] for item in result] scores_ss[k,:] = [item[3] for item in result] ratios_opt[k,:] = [item[4] for item in result] scores_opt[k,:] = [item[5] for item in result] ratios_opt_ss[k,:] = [item[6] for item in result] scores_opt_ss[k,:] = [item[7] for item in result] np.savetxt(&#39;ratios.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) from scipy.stats import sem error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] sns.set_context(&#39;paper&#39;) #sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.legend() plt.savefig(&#39;r_100_t_50.png&#39;, dpi=150, facecolor=&quot;w&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0.3) . .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/18/ali-gm-ss(2).html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/18/ali-gm-ss(2).html",
            "date": " • Aug 18, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Graph matching with spectral similarity (8-18, r=100, t=30, 'max_iter' = 30)",
            "content": "# collapse import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from graspy.simulations import sbm_corr . . Experiment Summary . Let $(G_1, G_2) sim rho-SBM( vec{n},B)$. (NB: binary, symmetric, hollow.) . $K = 3$. . the marginal SBM is conditional on block sizes $ vec{n}=[n_1,n_2,n_3]$. . $B = [(.20,.01,.01);(.01,.10,.01);(.01,.01,.20)]$. (NB: rank($B$)=3 with evalues $ approx [0.212,0.190,0.098]$.) . with $n = 150$ and $ vec{n}=[n_1,n_2,n_3] = [50,50,50]$ . for each $ rho in {0,0.1, cdots,0.9,1.0 }$ generate $r$ replicates $(G_1, G_2)$. . For all $r$ replicates, run $GM$ and $GM_{SS}$ each $t$ times, with each $t$ corresponding to a different random permutation on $G_2$. . Specifically,$G_2&#39; = Q G_2 Q^T,$ where $Q$ is sampled uniformly from the set of $n x n$ permutations matrices. . For each $t$ permutation, run $GM$ &amp; $GM_{SS}$ from the barycenter ($ gamma = 0$). . For each $r$, the $t$ permutation with the highest associated objective function value will have it&#39;s match ratio recorded . For any $ rho$ value, have $ delta$ denote the average match ratio over the $r$ realizations . Plot $x= rho$ vs $y$= $ delta$ $ pm$ 2s.e. . This notebook contains figures for $r=100$, $t=30$ . NOTE: The max number of FW iterations here is set at 30. . Description of $GM_{ss}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . MedianFlip both into the first orthant yielding $ bar{X}_1$ &amp; $ bar{X_2}$ . let $Phat = bar{X}_1 bar{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . Code included at the bottom, which was run on a remote server . # collapse ratios = np.genfromtxt(&#39;ratios.csv&#39;, delimiter = &#39;,&#39;) ratios_ss = np.genfromtxt(&#39;ratios_ss.csv&#39;, delimiter=&#39;,&#39;) scores = np.genfromtxt(&#39;scores.csv&#39;, delimiter = &#39;,&#39;) scores_ss = np.genfromtxt(&#39;scores_ss.csv&#39;, delimiter=&#39;,&#39;) rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) . . # collapse from scipy.stats import sem import seaborn as sns error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] . . # collapse sns.set_context(&#39;paper&#39;) sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.legend() . . &lt;matplotlib.legend.Legend at 0x7fa5f5ed1430&gt; . Script to run simulations . # collapse import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed from qap_sim import quadratic_assignment_sim import seaborn as sns from graspy.match import GraphMatch as GMP from graspy.simulations import sbm_corr def match_ratio(inds, n): return np.count_nonzero(inds == np.arange(n)) / n n = 150 m = 100 t = 30 #rhos = 0.1 * np.arange(11)[5:] rhos = np.arange(5,10.5,0.5) *0.1 n_p = len(rhos) ratios = np.zeros((n_p,m)) scores = np.zeros((n_p,m)) ratios_ss = np.zeros((n_p,m)) scores_ss = np.zeros((n_p,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False for k, rho in enumerate(rhos): np.random.seed(8888) seeds = [np.random.randint(1e8, size=t) for i in range(m)] def run_sim(seed): A1, A2 = sbm_corr( block_members, block_probs, rho, directed=directed, loops=loops ) score = 0 res_opt = None score_ss = 0 res_opt_ss = None for j in range(t): res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score: res_opt = res score = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;seed&#39;:seed[j]}) if res[&#39;score&#39;]&gt;score_ss: res_opt_ss = res score_ss = res[&#39;score&#39;] ratio = match_ratio(res_opt[&#39;col_ind&#39;], n) score = res_opt[&#39;score&#39;] ratio_ss = match_ratio(res_opt_ss[&#39;col_ind&#39;], n) score_ss = res_opt_ss[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt = match_ratio(res[&#39;col_ind&#39;], n) score_opt = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;shuffle_input&#39;:False}) ratio_opt_ss = match_ratio(res[&#39;col_ind&#39;], n) score_opt_ss = res[&#39;score&#39;] return ratio, score, ratio_ss, score_ss, ratio_opt, score_opt, ratio_opt_ss, score_opt_ss result = Parallel(n_jobs=-1, verbose=10)(delayed(run_sim)(seed) for seed in seeds) ratios[k,:] = [item[0] for item in result] scores[k,:] = [item[1] for item in result] ratios_ss[k,:] = [item[2] for item in result] scores_ss[k,:] = [item[3] for item in result] ratios_opt[k,:] = [item[4] for item in result] scores_opt[k,:] = [item[5] for item in result] ratios_opt_ss[k,:] = [item[6] for item in result] scores_opt_ss[k,:] = [item[7] for item in result] np.savetxt(&#39;ratios.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt.csv&#39;,ratios, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt.csv&#39;,scores, delimiter=&#39;,&#39;) np.savetxt(&#39;ratios_opt_ss.csv&#39;,ratios_ss, delimiter=&#39;,&#39;) np.savetxt(&#39;scores_opt_ss.csv&#39;,scores_ss, delimiter=&#39;,&#39;) from scipy.stats import sem error = [2*sem(ratios[i,:]) for i in range(n_p)] average = [np.mean(ratios[i,:] ) for i in range(n_p)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(n_p)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(n_p)] sns.set_context(&#39;paper&#39;) #sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.legend() plt.savefig(&#39;r_100_t_50.png&#39;, dpi=150, facecolor=&quot;w&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0.3) . .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/18/ali-gm-ss(1).html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/18/ali-gm-ss(1).html",
            "date": " • Aug 18, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Graph matching with spectral similarity",
            "content": "#collapse from graspy.match import GraphMatch as GMP from graspy.simulations import sbm_corr from graspy.embed import AdjacencySpectralEmbed . . #collapse import numpy as np import matplotlib.pyplot as plt import random import sys from joblib import Parallel, delayed import seaborn as sns . . #collapse from qap_sim import quadratic_assignment_sim . . Experiment Summary . Let $(G_1, G_2) sim rho-SBM( vec{n},B)$. (NB: binary, symmetric, hollow.) . $K = 3$. . the marginal SBM is conditional on block sizes $ vec{n}=[n_1,n_2,n_3]$. . $B = [(.20,.01,.01);(.01,.10,.01);(.01,.01,.20)]$. (NB: rank($B$)=3 with evalues $ approx [0.212,0.190,0.098]$.) . with $n = 150$ and $ vec{n}=[n_1,n_2,n_3] = [50,50,50]$ . for each $ rho in {0,0.1, cdots,0.9,1.0 }$ generate $r$ replicates $(G_1, G_2)$. . For all $r$ replicates, run $GM$ and $GM_{SS}$ each $t$ times, with each $t$ corresponding to a different random permutation on $G_2$. . Specifically,$G_2&#39; = Q G_2 Q^T,$ where $Q$ is sampled uniformly from the set of $n x n$ permutations matrices. . For each $t$ permutation, run $GM$ &amp; $GM_{SS}$ from the barycenter. . For each $r$, the $t$ permutation with the highest associated objective function value will have it&#39;s match ratio recorded . For any $ rho$ value, have $ delta$ denote the average match ratio over the $r$ realizations . Plot $x= rho$ vs $y$= $ delta$ $ pm$ 2s.e. . This notebook contains figures for $r=50$, $t=20$ . Description of $GM_{ss}$ Procedure . For each $r$, ASE each graph into $d=3$ yielding $ hat{X}_1$ &amp; $ hat{X}_2$ . MedianFlip both into the first orthant yielding $ bar{X}_1$ &amp; $ bar{X_2}$ . let $Phat = bar{X}_1 bar{X}_2^T$ and run $t$ repititions of gm with $G_1,G_2 and Phat$ as the similarity. . #collapse def match_ratio(inds, n): return np.count_nonzero(inds == np.arange(n)) / n n = 150 m = 1 t = 10 rhos = 0.1 * np.arange(11) ratios2 = np.zeros((11,m)) scores2 = np.zeros((11,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False . . #collapse n = 150 m = 50 t = 20 rhos = 0.1 * np.arange(11) ratios = np.zeros((11,m)) scores = np.zeros((11,m)) ratios_ss = np.zeros((11,m)) scores_ss = np.zeros((11,m)) n_per_block = int(n/3) n_blocks = 3 block_members = np.array(n_blocks * [n_per_block]) block_probs = np.array([[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]) directed = False loops = False #np.random.seed(8888) for k, rho in enumerate(rhos): for i in range(m): A1, A2 = sbm_corr( block_members, block_probs, rho, directed=directed, loops=loops ) score = 0 res_opt = None score_ss = 0 res_opt_ss = None for j in range(t): seed = k+m+t res = quadratic_assignment_sim(A1,A2, sim=False, maximize=True, options={&#39;seed&#39;:seed}) if res[&#39;score&#39;]&gt;score: res_opt = res score = res[&#39;score&#39;] res = quadratic_assignment_sim(A1,A2, sim=True, maximize=True, options={&#39;seed&#39;:seed}) if res[&#39;score&#39;]&gt;score_ss: res_opt_ss = res score_ss = res[&#39;score&#39;] ratios[k,i] = match_ratio(res_opt[&#39;col_ind&#39;], n) scores[k,i] = res_opt[&#39;score&#39;] ratios_ss[k,i] = match_ratio(res_opt_ss[&#39;col_ind&#39;], n) scores_ss[k,i] = res_opt_ss[&#39;score&#39;] #ratios[k] = ratios[k]/m . . #collapse from scipy.stats import sem error = [2*sem(ratios[i,:]) for i in range(11)] average = [np.mean(ratios[i,:] ) for i in range(11)] error_ss = [2*sem(ratios_ss[i,:]) for i in range(11)] average_ss = [np.mean(ratios_ss[i,:] ) for i in range(11)] . . #collapse sns.set_context(&#39;talk&#39;) #sns.set(rc={&#39;figure.figsize&#39;:(15,10)}) plt.errorbar(rhos,average_ss, error_ss,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM+SS&#39;) plt.errorbar(rhos,average, error,marker=&#39;o&#39;,capsize=3, elinewidth=1, markeredgewidth=1, label=&#39;GM&#39;, color=&#39;red&#39;) plt.xlabel(&quot;rho&quot;) plt.ylabel(&quot;avergae match ratio&quot;) plt.legend() plt.savefig(&#39;GM_GM+SS.png&#39;,fmt=&quot;png&quot;, dpi=150, facecolor=&quot;w&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0.3) . . &lt;ipython-input-111-9d9e37bc5d45&gt;:8: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument &#34;fmt&#34; which is no longer supported as of 3.3 and will become an error two minor releases later plt.savefig(&#39;GM_GM+SS.png&#39;,fmt=&#34;png&#34;, dpi=150, facecolor=&#34;w&#34;, bbox_inches=&#34;tight&#34;, pad_inches=0.3) . #collapse diff = ratios_ss[9,:] - ratios[9,:] plt.hist(diff, bins=20) plt.ylabel(&#39;Density&#39;) plt.xlabel(&#39;Match Ratio Difference (GM+SS - GM)&#39;) plt.title(&#39;Paired Difference Histogram (Rho = 0.9)&#39;) . . Text(0.5, 1.0, &#39;Paired Difference Histogram (Rho = 0.9)&#39;) . #collapse left_adj = np.genfromtxt(&#39;left_adj.csv&#39;, delimiter=&#39;,&#39;) right_adj = np.genfromtxt(&#39;right_adj.csv&#39;, delimiter=&#39;,&#39;) . . #collapse def median_sign_flips(X1, X2): X1_medians = np.median(X1, axis=0) X2_medians = np.median(X2, axis=0) val = np.multiply(X1_medians, X2_medians) t = (val &gt; 0) * 2 - 1 X1 = np.multiply(t.reshape(-1, 1).T, X1) return X1, X2 . .",
            "url": "https://neurodata.github.io/notebooks/graph-matching/ali-s-e/2020/08/16/ali-gm-ss.html",
            "relUrl": "/graph-matching/ali-s-e/2020/08/16/ali-gm-ss.html",
            "date": " • Aug 16, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Comparing multiple graph samples over time using latent distributions",
            "content": "import time import matplotlib as mpl import matplotlib.pyplot as plt import numpy as np import pandas as pd import seaborn as sns from graspy.inference import LatentDistributionTest from graspy.simulations import p_from_latent, sample_edges from graspy.utils import symmetrize from hyppo.discrim import DiscrimOneSample from sklearn.metrics import pairwise_distances np.random.seed(8888) sns.set_context(&quot;talk&quot;) mpl.rcParams[&quot;axes.edgecolor&quot;] = &quot;lightgrey&quot; mpl.rcParams[&quot;axes.spines.right&quot;] = False mpl.rcParams[&quot;axes.spines.top&quot;] = False def hardy_weinberg(theta): &quot;&quot;&quot; Maps a value from [0, 1] to the hardy weinberg curve. &quot;&quot;&quot; hw = [theta ** 2, 2 * theta * (1 - theta), (1 - theta) ** 2] return np.array(hw).T def sample_hw_graph(thetas): latent = hardy_weinberg(thetas) p_mat = p_from_latent(latent, rescale=False, loops=False) graph = sample_edges(p_mat, directed=False, loops=False) return (graph, p_mat, latent) . Parameters of the experiment . n_timepoints = 5 n_verts = 100 n_graphs_per_timepoint = 10 deltas = np.linspace(0, 2, n_timepoints) . Distributions in latent space . Let $HW( theta)$ be the Hardy-Weinberg distribution in $ mathbb{R}^3$. . Latent positions are distributed along this curve: $$X sim HW( theta)$$ With the distribution along the curve following a Beta distribution: $$ theta sim Beta(1, 1 + delta)$$ Let $ delta$ be a proxy for &quot;time&quot; . Below I plot the distributions of $ theta$ for each value of $ delta$, where we will use a different value of $ delta$ for each time point. . fig, ax = plt.subplots(1, 1, figsize=(8, 4)) for delta in deltas: thetas = np.random.beta( 1, 1 + delta, 10000 ) # fake # to make the distributions look cleaner sns.distplot(thetas, label=delta, ax=ax) plt.legend(title=r&quot;$ delta$&quot;, bbox_to_anchor=(1, 1), loc=&quot;upper left&quot;) _ = ax.set(ylabel=&quot;Frequency&quot;, yticks=[], xlabel=r&quot;$ theta$&quot;) . Sample latent positions, and then sample graphs . To generate each graph I sample a set of latent positions from the Hardy-Weinberg curve described above. Each time point will have multiple sets of latent positions sampled i.i.d. from the same distribution in latent space, then a single graph is sampled from each set of latent positions. . graphs = [] latents = [] times = [] for t, delta in enumerate(deltas): for i in range(n_graphs_per_timepoint): thetas = np.random.beta(1, 1 + delta, n_verts) graph, pmat, latent = sample_hw_graph(thetas) graphs.append(graph) times.append(t) latents.append(latent) times = np.array(times) . Plot 2 example sets of sampled latent positions for each time point . Here I just show the first two dimensions of true latent positions. From each of these we sample a graph. . fig, axs = plt.subplots( 2, n_timepoints, figsize=(n_timepoints * 4, 8), sharex=True, sharey=False, # TODO fix sharey and labeling ) for t, delta in enumerate(deltas): for i in range(2): ax = axs[i, t] latent = latents[t * n_graphs_per_timepoint + i] plot_latent = pd.DataFrame(latent) sns.scatterplot(data=plot_latent, x=0, y=1, ax=ax, linewidth=0, alpha=0.5, s=20) ax.set(xlabel=&quot;&quot;, ylabel=&quot;&quot;, xticks=[], yticks=[]) if i == 0: deltastr = r&quot;$ delta$&quot; + f&quot; = {deltas[t]}&quot; ax.set_title(f&quot;t = {t} ({deltastr})&quot;) if t == 0: ax.set_ylabel(f&quot;Sample {i + 1}&quot;) plt.tight_layout() . Plot adjacency matrices for 2 graphs from each time point . fig, axs = plt.subplots(2, n_timepoints, figsize=(n_timepoints * 4, 8)) for t, delta in enumerate(deltas): for i in range(2): graph = graphs[t * n_graphs_per_timepoint + i] ax = axs[i, t] sns.heatmap( graph, ax=ax, cbar=False, xticklabels=False, yticklabels=False, cmap=&quot;RdBu_r&quot;, square=True, center=0, ) if i == 0: deltastr = r&quot;$ delta$&quot; + f&quot; = {deltas[t]}&quot; ax.set_title(f&quot;t = {t} ({deltastr})&quot;) if t == 0: ax.set_ylabel(f&quot;Sample {i + 1}&quot;) plt.tight_layout() . Compute the test statistics for Latent Distribution Test (nonpar). . curr_time = time.time() pval_mat = np.zeros((len(graphs), len(graphs))) tstat_mat = np.zeros((len(graphs), len(graphs))) n_comparisons = (len(graphs) * (len(graphs) - 1)) / 2 counter = 0 for i, graph1 in enumerate(graphs): for j, graph2 in enumerate(graphs): if i &lt; j: ldt = LatentDistributionTest(n_bootstraps=200, workers=1) ldt.fit(graph1, graph2) pval_mat[i, j] = ldt.p_value_ tstat_mat[i, j] = ldt.sample_T_statistic_ pval_mat = symmetrize( pval_mat, method=&quot;triu&quot; ) # need to do way more bootstraps to be meaningful tstat_mat = symmetrize(tstat_mat, method=&quot;triu&quot;) print(f&quot;{(time.time() - curr_time)/60:.3f} minutes elapsed&quot;) . 5.981 minutes elapsed . All pairwise test statistics and p-values . Here I show test statistics for the latent position test between all possible pairs of graphs. Higher means more different. The test statistic being used here is the 2-sample dcorr test statistic on the estimated latent positions. Note that I&#39;m not doing the new seedless alignment here (but I&#39;d like to). . Then, I show the same for the p-values. . fig, ax = plt.subplots(1, 1, figsize=(8, 8)) sns.heatmap( tstat_mat, ax=ax, xticklabels=False, yticklabels=False, cmap=&quot;Reds&quot;, square=True, cbar_kws=dict(shrink=0.7), ) line_kws = dict(linestyle=&quot;-&quot;, linewidth=1, color=&quot;grey&quot;) for t in range(1, n_timepoints): ax.axvline(t * n_graphs_per_timepoint, **line_kws) ax.axhline(t * n_graphs_per_timepoint, **line_kws) tick_locs = ( np.arange(0, n_timepoints * n_graphs_per_timepoint, n_graphs_per_timepoint) + n_graphs_per_timepoint / 2 ) ax.set( xticks=tick_locs, xticklabels=np.arange(n_timepoints), xlabel=&quot;Time point&quot;, title=&quot;Latent distribution test statistics&quot;, ) fig, ax = plt.subplots(1, 1, figsize=(8, 8)) sns.heatmap( pval_mat, ax=ax, xticklabels=False, yticklabels=False, cmap=&quot;Reds&quot;, square=True, cbar_kws=dict(shrink=0.7), ) line_kws = dict(linestyle=&quot;-&quot;, linewidth=1, color=&quot;grey&quot;) for t in range(1, n_timepoints): ax.axvline(t * n_graphs_per_timepoint, **line_kws) ax.axhline(t * n_graphs_per_timepoint, **line_kws) tick_locs = ( np.arange(0, n_timepoints * n_graphs_per_timepoint, n_graphs_per_timepoint) + n_graphs_per_timepoint / 2 ) _ = ax.set( xticks=tick_locs, xticklabels=np.arange(n_timepoints), xlabel=&quot;Time point&quot;, title=&quot;Latent distribution test p-values&quot;, ) . Computing discriminability . Looks at whether distances between samples from the same object (time point, in this case) are smaller than distances between samples from different objects. In a sense, it&#39;s looking at whether the diagonal blocks in the above are smaller than the rest of the matrix. Here I&#39;m using the test statistic from above as the distance. Permutation test is used to test whether one&#39;s ability to discriminate between &quot;multiple samples&quot; from the same object is highter than one would expect by chance. . curr_time = time.time() discrim = DiscrimOneSample(is_dist=True) discrim.test(tstat_mat, times) print(f&quot;Discriminability one-sample p-value: {discrim.pvalue_}&quot;) print(f&quot;Discriminability test statistic: {discrim.stat}&quot;) print(f&quot;{(time.time() - curr_time)/60:.3f} minutes elapsed&quot;) . Discriminability one-sample p-value: 0.001 Discriminability test statistic: 0.8648333333333332 0.061 minutes elapsed . Test statistics and p-values as a function of time difference . Here I just play with plotting these test statistics and p-values as a function of how different in time the two graphs were. I add jitter to the time difference values just for visibility. . time_dist_mat = pairwise_distances(times.reshape((-1, 1)), metric=&quot;manhattan&quot;) triu_inds = np.triu_indices_from(time_dist_mat, k=1) time_dists = time_dist_mat[triu_inds] + np.random.uniform(-0.2, 0.2, len(triu_inds[0])) latent_dists = tstat_mat[triu_inds] fig, ax = plt.subplots(1, 1, figsize=(8, 4)) sns.scatterplot(x=time_dists, y=latent_dists, s=10, linewidth=0, alpha=0.3, ax=ax) ax.set(ylabel=&quot;Test statistic&quot;, xlabel=&quot;Difference in time&quot;) pval_dists = pval_mat[triu_inds] fig, ax = plt.subplots(1, 1, figsize=(8, 4)) sns.scatterplot(x=time_dists, y=pval_dists, s=10, linewidth=0, alpha=0.3, ax=ax) _ = ax.set(ylabel=&quot;p-value&quot;, xlabel=&quot;Difference in time&quot;) .",
            "url": "https://neurodata.github.io/notebooks/pedigo/graspologic/2020/07/23/multi-time-latents.html",
            "relUrl": "/pedigo/graspologic/2020/07/23/multi-time-latents.html",
            "date": " • Jul 23, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://neurodata.github.io/notebooks/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://neurodata.github.io/notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://neurodata.github.io/notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://neurodata.github.io/notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}